#!/home/gushanshan/anaconda3/envs/vscode_r/bin/Rscript
# 1. packages and external scripts ---------------------------------------- TODO:
library(ggplot2)
library(ggsignif)
library(dplyr)
library(ggpubr)
library(grid)
library(patchwork)
library(ggrepel)
library(RColorBrewer)
library(data.table)
# 2. functions ------------------------------------------------------------ TODO:
get_data_for_plot <- function(dataname = NULL) {
    data <- fread(dataname, stringsAsFactors = F, sep = " ", select = 1:11)
    colnames(data) <- c("nopeak", paste("w", 1:10, sep = ""))
    rownames(data) <- paste("chrom", 1:14, sep = "")

    data_for_plot <- data.frame(
        value = unlist(data),
        chrom = rep(rownames(data), times = ncol(data)),
        source = rep(colnames(data), each = nrow(data))
    )
    a <- gsub("chrom", "", data_for_plot$chrom)
    a[a != "1"] <- ""
    data_for_plot$label <- a
    return(data_for_plot)
}

get_data_for_plot_facet <- function(dataname = NULL) {
    data <- fread(dataname, stringsAsFactors = F, sep = " ", select = 1:11)
    colnames(data) <- c("nopeak", paste("w", 1:10, sep = ""))
    rownames(data) <- paste("chrom", 1:14, sep = "")

    data_for_plot <- data.frame(
        value = unlist(data),
        chrom = rep(rownames(data), times = ncol(data)),
        source = rep(colnames(data), each = nrow(data))
    )
    a <- gsub("chrom", "", data_for_plot$chrom)
    a[a != "1"] <- ""
    data_for_plot$label <- a
    data_for_plot$variant <- gsub("_mean_variant_count.*", "", dataname, perl = T)
    return(data_for_plot)
}

get_data_for_plot1 <- function(dataname = NULL) {
    data <- fread(dataname, stringsAsFactors = F, sep = " ", select = 1:2)
    colnames(data) <- c("nopeak", "w1")
    rownames(data) <- paste("chrom", 1:14, sep = "")

    data_for_plot <- data.frame(
        value = unlist(data),
        chrom = rep(rownames(data), times = ncol(data)),
        source = rep(colnames(data), each = nrow(data))
    )
    a <- gsub("chrom", "", data_for_plot$chrom)
    a[a != "1"] <- ""
    data_for_plot$label <- a
    return(data_for_plot)
}

get_data_for_plot_for_control <- function(dataname = NULL) {
    data <- fread(dataname, stringsAsFactors = F, sep = " ")
    colnames(data) <- c("nopeak", "nopeak_motif", "nopeak500_motif")
    rownames(data) <- paste("chrom", 1:14, sep = "")

    data_for_plot <- data.frame(
        value = unlist(data),
        chrom = rep(rownames(data), times = ncol(data)),
        source = rep(colnames(data), each = nrow(data))
    )
    a <- gsub("chrom", "", data_for_plot$chrom)
    a[a != "1"] <- ""
    data_for_plot$label <- a
    return(data_for_plot)
}

get_data_for_plot_for_peak <- function(dataname = NULL) {
    data <- fread(dataname, stringsAsFactors = F, sep = " ")
    colnames(data) <- c("peak", "peak_motif")
    rownames(data) <- paste("chrom", 1:14, sep = "")

    data_for_plot <- data.frame(
        value = unlist(data),
        chrom = rep(rownames(data), times = ncol(data)),
        source = rep(colnames(data), each = nrow(data))
    )
    a <- gsub("chrom", "", data_for_plot$chrom)
    a[a != "1"] <- ""
    data_for_plot$label <- a
    return(data_for_plot)
}

get_data_for_plot_3_control <- function(dataname = NULL) {
    data <- fread(dataname, stringsAsFactors = F, sep = " ")
    colnames(data) <- c("nopeak", "nopeak_motif", "nopeak500_motif", paste("w", 1:10, sep = ""))
    rownames(data) <- paste("chrom", 1:14, sep = "")

    data_for_plot <- data.frame(
        value = unlist(data),
        chrom = rep(rownames(data), times = ncol(data)),
        source = rep(colnames(data), each = nrow(data))
    )
    a <- gsub("chrom", "", data_for_plot$chrom)
    a[a != "1"] <- ""
    data_for_plot$label <- a
    return(data_for_plot)
}

plot_mutation_density_old <- function(data_for_plot = NULL, sig_y = NULL, y_min = NULL, y_max = NULL, ylabel = NULL, label = NULL, xlabel = NULL) {
    stat.test <- compare_means(
        value ~ source,
        data = subset(data_for_plot, source == "nopeak" | source == "w1"),
        method = "t.test", paired = T
    )
    stat.test <- stat.test %>% mutate(y.position = sig_y)

    p <- ggboxplot(data = data_for_plot, x = "source", y = "value", color = "source", add = "jitter", add.params = list(size = 3)) +
        stat_pvalue_manual(data = stat.test, label = "p = {p.format}", size = 10, remove.bracket = T) +
        # stat_compare_means(aes(group = source),
        #     ref.group = "nopeak",
        #     label = "p.signif", paired = T, label.y = sig_y, size = 10
        # ) +
        scale_color_manual(values = color_value) +
        # geom_smooth(data = subset(data_for_plot, source != "nopeak"), method = "loess", se = FALSE, aes(group = 1)) +
        scale_x_discrete(labels = c("control", "5%", "10%", "15%", "20%", "25%", "30%", "35%", "40%", "45%", "50%")) +
        scale_y_continuous(expand = c(0, 0)) +
        coord_cartesian(ylim = c(y_min, y_max)) +
        labs(y = ylabel) +
        theme_bw() +
        theme(
            panel.border = element_blank(),
            panel.grid = element_blank(),
            axis.line = element_line(colour = "black"),
            axis.text.x = element_blank(),
            axis.text.y = element_text(size = 24, color = "black"),
            plot.title = element_text(
                colour = "black",
                size = 24, vjust = 0.5, hjust = 0.5
            ),
            axis.title.x = element_blank(),
            axis.title.y = element_text(size = 28, color = "black"),
            legend.position = "None",
            plot.margin = margin(0.2, 0.3, 0.2, 0.2, "cm")
        )
    if (label == T) {
        p1 <- p + geom_text_repel(aes(label = label), data_for_plot,
            size = 4, box.padding = 0.5, point.padding = 0.08,
            min.segment.length = 0.05, segment.color = "black", show.legend = F, max.overlaps = 20
        )
    }
    if (xlabel == TRUE) {
        p <- p + theme(axis.text.x = element_text(size = 24, color = "black", angle = 45, hjust = 0.7, vjust = 0.7))
    }
    return(p)
}

plot_mutation_density <- function(data_for_plot = NULL) {
    # stat.test <- compare_means(
    #     value ~ source,
    #     data = subset(data_for_plot, source == "nopeak" | source == "w1"),
    #     method = "t.test", paired = T
    # )
    # stat.test <- stat.test %>% mutate(y.position = 0.15)

    p <- ggplot(data_for_plot, aes(x = source, y = value, color = source)) +
        geom_boxplot(position = position_dodge(), outlier.shape = NA, width = 0.5, size = 1) +
        geom_point(size = 6, position = position_jitterdodge()) +
        facet_wrap(~variant_f, nrow = 1, ncol = 3, scale = "free") +
        # stat_pvalue_manual(data = stat.test, label = "p = {p.format}", size = 10, remove.bracket = T) +
        stat_compare_means(
            method = "t.test", tip.length = 0, bracket.size = 0,
            comparisons = list(c("nopeak", "w1")),
            hide.ns = T, vjust = 0.5, show.legend = FALSE,
            label = "p = {p.format}", paired = T, size = 15
        ) +
        scale_color_manual(values = color_value) +
        scale_x_discrete(labels = c("Control", "Submit~5%", "5~10%", "10~15%", "15~20%", "20~25%", "25~30%", "30~35%", "35~40%", "40~45%", "45~50%")) +
        labs(y = "Mutation density") +
        theme_classic() +
        theme(
            panel.grid.major = element_blank(),
            panel.grid.minor = element_blank(),
            strip.background = element_blank(),
            panel.border = element_blank(),
            # strip.background = element_rect(fill = rgb(0, 72, 144, maxColorValue = 255)),
            strip.text.x = element_text(size = 44, color = "black", face = "bold"),
            # panel.border = element_blank(),
            axis.line = element_line(colour = "black"),
            axis.text.x = element_text(
                size = 36, color = "black",
                angle = 45, hjust = 0.5, vjust = 0.5
            ),
            axis.text.y = element_text(size = 36, color = "black"),
            axis.title.x = element_blank(),
            axis.title.y = element_text(size = 40, color = "black"),
            legend.title = element_blank(),
            legend.position = "None",
            plot.margin = margin(0.2, 0.3, 0.2, 0.2, "cm"),
            panel.spacing = unit(3, "lines")
        )
    return(p)
}

plot_mutation_density_for_control <- function(data_for_plot = NULL, sig_y = NULL, y_min = NULL, y_max = NULL, ylabel = NULL, label = NULL, xlabel = NULL) {
    p <- ggboxplot(data = data_for_plot, x = "source", y = "value", color = "source", add = "jitter", add.params = list(size = 3)) +
        # stat_pvalue_manual(data = stat.test, label = "p = {p.format}", size = 10, remove.bracket = T) +
        stat_compare_means(
            comparisons = list(c("nopeak", "nopeak_motif"), c("nopeak", "nopeak500_motif"), c("nopeak_motif", "nopeak500_motif")),
            label = "p.signif", paired = T, size = 10
        ) +
        scale_color_manual(values = color_value_for_control) +
        # geom_smooth(data = subset(data_for_plot, source != "nopeak"), method = "loess", se = FALSE, aes(group = 1)) +
        scale_x_discrete(labels = c("nopeak", "nopeak_motif", "nopeak500_motif")) +
        scale_y_continuous(expand = c(0, 0)) +
        coord_cartesian(ylim = c(y_min, y_max)) +
        labs(y = ylabel) +
        theme_bw() +
        theme(
            panel.border = element_blank(),
            panel.grid = element_blank(),
            axis.line = element_line(colour = "black"),
            axis.text.x = element_blank(),
            axis.text.y = element_text(size = 24, color = "black"),
            plot.title = element_text(
                colour = "black",
                size = 24, vjust = 0.5, hjust = 0.5
            ),
            axis.title.x = element_blank(),
            axis.title.y = element_text(size = 28, color = "black"),
            legend.position = "None",
            plot.margin = margin(0.2, 0.3, 0.2, 0.2, "cm")
        )
    if (label == T) {
        p1 <- p + geom_text_repel(aes(label = label), data_for_plot,
            size = 4, box.padding = 0.5, point.padding = 0.08,
            min.segment.length = 0.05, segment.color = "black", show.legend = F, max.overlaps = 20
        )
    }
    if (xlabel == TRUE) {
        p <- p + theme(axis.text.x = element_text(size = 24, color = "black", angle = 45, hjust = 0.7, vjust = 0.7))
    }
    return(p)
}

plot_mutation_density_for_peak <- function(data_for_plot = NULL, sig_y = NULL, y_min = NULL, y_max = NULL, ylabel = NULL, label = NULL, xlabel = NULL) {
    p <- ggboxplot(data = data_for_plot, x = "source", y = "value", color = "source", add = "jitter", add.params = list(size = 3)) +
        # stat_pvalue_manual(data = stat.test, label = "p = {p.format}", size = 10, remove.bracket = T) +
        stat_compare_means(
            comparisons = list(c("peak", "peak_motif")),
            label = "p.signif", paired = T, size = 10
        ) +
        scale_color_manual(values = color_value_for_peak) +
        # geom_smooth(data = subset(data_for_plot, source != "nopeak"), method = "loess", se = FALSE, aes(group = 1)) +
        scale_x_discrete(labels = c("peak", "peak_motif")) +
        scale_y_continuous(expand = c(0, 0)) +
        coord_cartesian(ylim = c(y_min, y_max)) +
        labs(y = ylabel) +
        theme_bw() +
        theme(
            panel.border = element_blank(),
            panel.grid = element_blank(),
            axis.line = element_line(colour = "black"),
            axis.text.x = element_blank(),
            axis.text.y = element_text(size = 24, color = "black"),
            plot.title = element_text(
                colour = "black",
                size = 24, vjust = 0.5, hjust = 0.5
            ),
            axis.title.x = element_blank(),
            axis.title.y = element_text(size = 28, color = "black"),
            legend.position = "None",
            plot.margin = margin(0.2, 0.3, 0.2, 0.2, "cm")
        )
    if (label == T) {
        p1 <- p + geom_text_repel(aes(label = label), data_for_plot,
            size = 4, box.padding = 0.5, point.padding = 0.08,
            min.segment.length = 0.05, segment.color = "black", show.legend = F, max.overlaps = 20
        )
    }
    if (xlabel == TRUE) {
        p <- p + theme(axis.text.x = element_text(size = 24, color = "black", angle = 45, hjust = 0.7, vjust = 0.7))
    }
    return(p)
}

plot_mutation_density_base <- function(data_for_plot = NULL, sig_y = NULL, y_min = NULL, y_max = NULL, ylabel = NULL, label = NULL, xlabel = NULL) {
    stat.test <- compare_means(
        value ~ source,
        data = subset(data_for_plot, source == "nopeak" | source == "w1"),
        method = "wilcox.test", paired = TRUE
    )
    stat.test <- stat.test %>% mutate(y.position = sig_y)
    p <- ggboxplot(data = data_for_plot, x = "source", y = "value", color = "source", add = "jitter", add.params = list(size = 3)) +
        stat_pvalue_manual(data = stat.test, label = "p = {p.format}", size = 10, remove.bracket = TRUE) +
        scale_color_manual(values = color_value) +
        scale_x_discrete(labels = c("control", "5%", "10%", "15%", "20%", "25%", "30%", "35%", "40%", "45%", "50%")) +
        scale_y_continuous(expand = c(0, 0)) +
        coord_cartesian(ylim = c(y_min, y_max)) +
        labs(y = ylabel) +
        theme_bw() +
        theme(
            panel.border = element_blank(),
            panel.grid = element_blank(),
            axis.line = element_line(colour = "black"),
            axis.text.x = element_blank(),
            axis.text.y = element_text(size = 24, color = "black"),
            plot.title = element_text(
                colour = "black",
                size = 24, vjust = 0.5, hjust = 0.5
            ),
            axis.title.x = element_blank(),
            axis.title.y = element_text(size = 28, color = "black"),
            legend.position = "None",
            plot.margin = margin(0.2, 0.3, 0.2, 0.2, "cm")
        )
    if (label == TRUE) {
        p <- p + geom_text_repel(aes(label = label), data_for_plot,
            size = 4, box.padding = 0.5, point.padding = 0.08,
            min.segment.length = 0.05, segment.color = "black", show.legend = F, max.overlaps = 100
        )
    }
    if (xlabel == TRUE) {
        p <- p + theme(axis.text.x = element_text(size = 24, color = "black", angle = 45, hjust = 0.7, vjust = 0.7))
    }
    return(p)
}

plot_mutation_density_base1 <- function(data_for_plot = NULL, sig_y = NULL, y_min = NULL, y_max = NULL, ylabel = NULL, label = NULL, xlabel = NULL) {
    stat.test <- compare_means(
        value ~ source,
        data = subset(data_for_plot, source == "nopeak" | source == "w1"),
        method = "wilcox.test", paired = TRUE
    )
    stat.test <- stat.test %>% mutate(y.position = sig_y)
    p <- ggboxplot(data = data_for_plot, x = "source", y = "value", color = "source", add = "jitter", add.params = list(size = 3)) +
        stat_pvalue_manual(data = stat.test, label = "p = {p.format}", size = 10, remove.bracket = TRUE) +
        scale_color_manual(values = color_value) +
        scale_x_discrete(labels = c("control", "absolute 10bp")) +
        scale_y_continuous(expand = c(0, 0)) +
        coord_cartesian(ylim = c(y_min, y_max)) +
        labs(y = ylabel) +
        theme_bw() +
        theme(
            panel.border = element_blank(),
            panel.grid = element_blank(),
            axis.line = element_line(colour = "black"),
            axis.text.x = element_blank(),
            axis.text.y = element_text(size = 24, color = "black"),
            plot.title = element_text(
                colour = "black",
                size = 24, vjust = 0.5, hjust = 0.5
            ),
            axis.title.x = element_blank(),
            axis.title.y = element_text(size = 28, color = "black"),
            legend.position = "None",
            plot.margin = margin(0.2, 0.3, 0.2, 0.2, "cm")
        )
    if (label == TRUE) {
        p <- p + geom_text_repel(aes(label = label), data_for_plot,
            size = 4, box.padding = 0.5, point.padding = 0.08,
            min.segment.length = 0.05, segment.color = "black", show.legend = F, max.overlaps = 100
        )
    }
    if (xlabel == TRUE) {
        p <- p + theme(axis.text.x = element_text(size = 24, color = "black"))
    }
    return(p)
}

plot_N2N <- function(data_for_all_direc = NULL, y_pos = NULL, nrow = NULL, ncol = NULL) {
    anno_data_for_all_direc <- compare_means(value ~ source, group.by = "variant", data = data_for_all_direc) %>% mutate(y_pos = y_pos)

    p <- ggplot(data_for_all_direc, aes(x = source, y = value, color = source)) +
        geom_boxplot(position = position_dodge()) +
        geom_point(position = position_jitterdodge()) +
        # stat_compare_means(aes(group = source),
        #     ref.group = "w1",hide.ns=T,
        #     label = "p.signif", paired = T, label.y = label.y, size = 10
        # ) +
        facet_wrap(~variant, nrow = nrow, ncol = ncol) +
        scale_color_manual(values = color_value) +
        scale_x_discrete(labels = c("Control", "C(motif)", "C500(motif)", rep("", 4), "W5", rep("", 4), "W10")) +
        theme_bw() +
        theme(
            strip.background = element_rect(fill = mycolors[5]),
            strip.text.x = element_text(size = 30),
            panel.border = element_blank(),
            # panel.grid = element_blank(),
            axis.line = element_line(colour = "black"),
            axis.text.x = element_text(size = 30, color = "black", angle = 45, hjust = 0.7, vjust = 0.7),
            axis.text.y = element_text(size = 30, color = "black"),
            plot.title = element_text(
                colour = "black",
                size = 24, vjust = 0.5, hjust = 0.5
            ),
            axis.title.x = element_blank(),
            axis.title.y = element_blank(),
            legend.position = "None",
            plot.margin = margin(0.2, 0.3, 0.2, 0.2, "cm"),
            panel.spacing = unit(3, "lines")
        )
    return(p)
}
# 3. input ---------------------------------------------------------------- TODO:
path <- "/picb/evolgen/users/gushanshan/projects/malaria/dataAndResult/1_2rd_initial_evaluation/ESEA_WSEA_OCE_SAM_SAS/sliding_window/relative0.05/mutation_density"
popu_symbol <- "ESEA_WSEA_OCE_SAM_SAS"
# 4. variable setting of test module--------------------------------------- TODO:

# 5. process -------------------------------------------------------------- TODO:
setwd(path)


cols <- brewer.pal(3, "YlOrRd")
pal <- colorRampPalette(cols)
mycolors <- rev(pal(10))
color_value <- c("#868686", mycolors)
names(color_value) <- c("control", paste("w", 1:10, sep = ""))
color_value_for_control <- c("nopeak" = "#868686", "nopeak_motif" = "#868686", "nopeak500_motif" = "#2f2f2f")
color_value_for_peak <- c("peak" = "#F03B20", "peak_motif" = "#F03B20")

variants_type <- c("snps", "indels")


for (prefix in c("_correct_indel", "_nomatter_ancestor")) {
    data_for_plot <- lapply(variants_type, function(x) {
        get_data_for_plot_facet(paste0(x, "_mean_variant_count", prefix))
    })
    names(data_for_plot) <- variants_type

    data_for_plot_global <- data_for_plot[c("snps", "indels")]
    data_for_plot_global <- do.call(rbind, data_for_plot_global)
    data_for_plot_global$variant <- gsub("snps", "SNPs", gsub("indels", "Indels", data_for_plot_global$variant))

    data_for_plot_global$variant_f <- factor(data_for_plot_global$variant, levels = c(
        "SNPs", "Indels"
    ))
    data_for_plot_global$source <- factor(data_for_plot_global$source, levels = c("nopeak", paste("w", 1:10, sep = "")))
    plot_mutation_density(data_for_plot = data_for_plot_global)
    ggsave(paste0("all_snp_indel_sliding_window_mutation_density_facet", prefix, ".pdf"), width = 20, height = 10)
}
