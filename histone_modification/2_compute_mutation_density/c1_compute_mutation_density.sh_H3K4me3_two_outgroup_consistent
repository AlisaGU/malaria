#!/bin/bash
#SBATCH -n 1
#SBATCH -A evolgen-grp
#SBATCH -p evolgen
#SBATCH -o %x-%j.out

# FUNCTIONS TODO:
select_chrom_peak_nopeak_bed() {
    $bedtools complement -i $peak_file -g $chrom_len >$nopeak_file
    mkdir -p $chrom_bed_dir
    cd $chrom_bed_dir
    awk -F"\t" '{print > $1".peak.bed"}' $peak_file
    $bedtools subtract -a $nopeak_file -b $two_outgroup_inconsistent_region_in_core_and_noncore | awk -F"\t" '{print > $1".nopeak.two_outgroup_consistent_region.bed"}'
    # $bedtools subtract -a $nopeak_file -b $two_outgroup_inconsistent_region_in_core_and_noncore | $bedtools subtract -a stdin -b $m6mA_peak | awk -F"\t" '{print > $1".nopeak.two_outgroup_consistent_region.no6mA.bed"}'
    # $bedtools subtract -a $nopeak_file -b $two_outgroup_inconsistent_region_in_core_and_noncore | $bedtools intersect -a stdin -b $core_region | awk -F"\t" '{print > $1".nopeak.two_outgroup_consistent_region.core.bed"}'
    # $bedtools subtract -a $nopeak_file -b $two_outgroup_inconsistent_region_in_core_and_noncore | $bedtools intersect -a stdin -b $core_region | $bedtools subtract -a stdin -b $m6mA_peak | awk -F"\t" '{print > $1".nopeak.two_outgroup_consistent_region.core.no6ma.bed"}'
    # $bedtools subtract -a $nopeak_file -b $two_outgroup_inconsistent_region_in_core_and_noncore | $bedtools subtract -a stdin -b $m6mA_peak_extend | awk -F"\t" '{print > $1".nopeak.two_outgroup_consistent_region.no6mA_extend.bed"}'
    # $bedtools subtract -a $nopeak_file -b $two_outgroup_inconsistent_region_in_core_and_noncore | $bedtools subtract -a stdin -b $core_region | awk -F"\t" '{print > $1".nopeak.two_outgroup_consistent_region.noncore.bed"}'

    $bedtools flank -i $peak_file -g $chrom_len -b 500 | $bedtools subtract -a $nopeak_file -b stdin | $bedtools subtract -a stdin -b $two_outgroup_inconsistent_region_in_core_and_noncore | awk -F"\t" '{print > $1".nopeak500.two_outgroup_consistent_region.bed"}'
    # $bedtools flank -i $peak_file -g $chrom_len -b 500 | $bedtools subtract -a $nopeak_file -b stdin | $bedtools subtract -a stdin -b $two_outgroup_inconsistent_region_in_core_and_noncore | $bedtools subtract -a stdin -b $m6mA_peak | awk -F"\t" '{print > $1".nopeak500.two_outgroup_consistent_region.no6mA.bed"}'
    # $bedtools flank -i $peak_file -g $chrom_len -b 500 | $bedtools subtract -a $nopeak_file -b stdin | $bedtools subtract -a stdin -b $two_outgroup_inconsistent_region_in_core_and_noncore | $bedtools intersect -a stdin -b $core_region | awk -F"\t" '{print > $1".nopeak500.two_outgroup_consistent_region.core.bed"}'
    # $bedtools flank -i $peak_file -g $chrom_len -b 500 | $bedtools subtract -a $nopeak_file -b stdin | $bedtools subtract -a stdin -b $two_outgroup_inconsistent_region_in_core_and_noncore | $bedtools intersect -a stdin -b $core_region | $bedtools subtract -a stdin -b $m6mA_peak | awk -F"\t" '{print > $1".nopeak500.two_outgroup_consistent_region.core.no6ma.bed"}'
    # $bedtools flank -i $peak_file -g $chrom_len -b 500 | $bedtools subtract -a $nopeak_file -b stdin | $bedtools subtract -a stdin -b $two_outgroup_inconsistent_region_in_core_and_noncore | $bedtools subtract -a stdin -b $m6mA_peak_extend | awk -F"\t" '{print > $1".nopeak500.two_outgroup_consistent_region.no6mA_extend.bed"}'
    # $bedtools flank -i $peak_file -g $chrom_len -b 500 | $bedtools subtract -a $nopeak_file -b stdin | $bedtools subtract -a stdin -b $two_outgroup_inconsistent_region_in_core_and_noncore | $bedtools subtract -a stdin -b $core_region | awk -F"\t" '{print > $1".nopeak500.two_outgroup_consistent_region.noncore.bed"}'

    cd -
}

get_chrom_treatment_control_histone_modification_level_bed() {
    mkdir -p $modifi_level_dir
    cd $modifi_level_dir
    awk -F"\t" '{print > $1".treat.bed"}' ../${treatment_level}
    awk -F"\t" '{print > $1".cont.bed"}' ../${control_level}
    cd -
}

get_sliding_window() {
    relative="0.05"
    for chrom in $(echo $autosomes | tr " " "\n"); do
        get_sliding_window_for_chrom $chrom "relative" $relative
    done
}

get_sliding_window_for_chrom() {
    chrom=$1
    flank_length_type=$2
    flank_length=$3
    peak_pos=$chrom_bed_dir/${chrom}.peak.bed
    treatment_level=$modifi_level_dir/${chrom}.treat.bed
    control_level=$modifi_level_dir/${chrom}.cont.bed

    output_dir=$chrom_bed_dir/sliding_window/${flank_length_type}.${flank_length}/${chrom}
    mkdir -p $output_dir
    $code_dir/s1_get_peak_submit_sliding_window_pos.R $(pwd) $chrom $peak_pos $flank_length_type $flank_length $treatment_level $control_level $output_dir
}

exclude_inconsistent_site_from_window() {
    cd $chrom_bed_dir/sliding_window/relative.0.05/
    for chrom in $(echo $autosomes | tr " " "\n"); do
        cd $chrom
        for w in $(/usr/bin/ls *bed); do
            $bedtools subtract -a $w -b $two_outgroup_inconsistent_region_in_core_and_noncore >$(echo $w | sed "s/bed/two_outgroup_consistent_region.bed/g")
        done

        # for w in $(/usr/bin/ls *two_outgroup_consistent_region.bed); do
        #     $bedtools subtract -a $w -b $two_outgroup_inconsistent_region_in_core_and_noncore | $bedtools subtract -a stdin -b $m6mA_peak >$(echo $w | sed "s/bed/no6mA.bed/g")
        # done

        # for w in $(/usr/bin/ls *two_outgroup_consistent_region.bed); do
        #     $bedtools subtract -a $w -b $two_outgroup_inconsistent_region_in_core_and_noncore | $bedtools intersect -a stdin -b $core_region >$(echo $w | sed "s/bed/core.bed/g")
        # done

        # for w in $(/usr/bin/ls *two_outgroup_consistent_region.bed); do
        #     $bedtools subtract -a $w -b $two_outgroup_inconsistent_region_in_core_and_noncore | $bedtools intersect -a stdin -b $core_region | $bedtools subtract -a stdin -b $m6mA_peak >$(echo $w | sed "s/bed/core.no6ma.bed/g")
        # done

        # for w in $(/usr/bin/ls *two_outgroup_consistent_region.bed); do
        #     $bedtools subtract -a $w -b $two_outgroup_inconsistent_region_in_core_and_noncore | $bedtools subtract -a stdin -b $m6mA_peak_extend >$(echo $w | sed "s/bed/no6mA_extend.bed/g")
        # done

        # for w in $(/usr/bin/ls *two_outgroup_consistent_region.bed); do
        #     $bedtools subtract -a $w -b $two_outgroup_inconsistent_region_in_core_and_noncore | $bedtools subtract -a stdin -b $core_region >$(echo $w | sed "s/bed/noncore.bed/g")
        # done
        cd -
    done
}

compute_mutation_density() {
    var_type=$1

    mutation_density_dir=$global_output_dir/$popu_symbol/$histone_modification_type/sliding_window_two_outgroup_consistent/relative.0.05/mutation_density
    mkdir -p $mutation_density_dir
    mean_variant_count=$mutation_density_dir/${var_type}_mean_variant_count
    # mean_variant_count=$mutation_density_dir/${var_type}_mean_variant_count_count
    # mean_variant_count=$mutation_density_dir/${var_type}_mean_variant_count_region_len

    rm -rf $mean_variant_count

    cd $histone_mofification_dir
    for chrom in $(echo $autosomes | tr " " "\n"); do
        chrom_var_count=""

        regions="$chrom_bed_dir/${chrom}.nopeak.two_outgroup_consistent_region.bed"
        regions+=" $chrom_bed_dir/${chrom}.nopeak500.two_outgroup_consistent_region.bed"

        for w in $(seq 1 10); do
            regions+=" $chrom_bed_dir/sliding_window/relative.0.05/${chrom}/w$w.two_outgroup_consistent_region.bed"
        done

        for region_bed in $(echo $regions | tr " " "\n"); do
            chrom_var_count+=" $(get_average_variant_count_for_chrom $chrom $region_bed)"

        done
        echo $chrom_var_count >>$mean_variant_count
    done
}

compute_mutation_density_no6ma() {
    var_type=$1

    mutation_density_dir=$global_output_dir/$popu_symbol/$histone_modification_type/sliding_window/relative.0.05/mutation_density
    mkdir -p $mutation_density_dir
    # mean_variant_count=$mutation_density_dir/${var_type}_mean_variant_count_no6mA
    # mean_variant_count=$mutation_density_dir/${var_type}_mean_variant_count_no6mA_count
    mean_variant_count=$mutation_density_dir/${var_type}_mean_variant_count_no6mA_region_len

    rm -rf $mean_variant_count

    cd $histone_mofification_dir
    for chrom in $(echo $autosomes | tr " " "\n"); do
        chrom_var_count=""

        regions="$chrom_bed_dir/${chrom}.nopeak.two_outgroup_consistent_region.no6mA.bed"
        regions+=" $chrom_bed_dir/${chrom}.nopeak500.two_outgroup_consistent_region.no6mA.bed"

        for w in $(seq 1 10); do
            regions+=" $chrom_bed_dir/sliding_window/relative.0.05/${chrom}/w$w.two_outgroup_consistent_region.no6mA.bed"
        done

        for region_bed in $(echo $regions | tr " " "\n"); do
            # chrom_var_count+=" $(get_average_variant_count_for_chrom $chrom $region_bed)"
            # chrom_var_count+=" $(get_average_variant_count_for_chrom_count $chrom $region_bed)"
            chrom_var_count+=" $(get_average_variant_count_for_chrom_region_len $chrom $region_bed)"

        done
        echo $chrom_var_count >>$mean_variant_count
    done
}

compute_mutation_density_no6ma_extend() {
    var_type=$1

    mutation_density_dir=$global_output_dir/$popu_symbol/$histone_modification_type/sliding_window/relative.0.05/mutation_density
    mkdir -p $mutation_density_dir
    mean_variant_count=$mutation_density_dir/${var_type}_mean_variant_count_no6mA_extend

    rm -rf $mean_variant_count

    cd $histone_mofification_dir
    for chrom in $(echo $autosomes | tr " " "\n"); do
        chrom_var_count=""

        regions="$chrom_bed_dir/${chrom}.nopeak.two_outgroup_consistent_region.no6mA_extend.bed"
        regions+=" $chrom_bed_dir/${chrom}.nopeak500.two_outgroup_consistent_region.no6mA_extend.bed"

        for w in $(seq 1 10); do
            regions+=" $chrom_bed_dir/sliding_window/relative.0.05/${chrom}/w$w.two_outgroup_consistent_region.no6mA_extend.bed"
        done

        for region_bed in $(echo $regions | tr " " "\n"); do
            chrom_var_count+=" $(get_average_variant_count_for_chrom $chrom $region_bed)"

        done
        echo $chrom_var_count >>$mean_variant_count
    done
}

compute_mutation_density_core() {
    var_type=$1

    mutation_density_dir=$global_output_dir/$popu_symbol/$histone_modification_type/sliding_window/relative.0.05/mutation_density
    mkdir -p $mutation_density_dir
    mean_variant_count=$mutation_density_dir/${var_type}_mean_variant_count_core

    rm -rf $mean_variant_count

    cd $histone_mofification_dir
    for chrom in $(echo $autosomes | tr " " "\n"); do
        chrom_var_count=""

        regions="$chrom_bed_dir/${chrom}.nopeak.two_outgroup_consistent_region.core.bed"
        regions+=" $chrom_bed_dir/${chrom}.nopeak500.two_outgroup_consistent_region.core.bed"

        for w in $(seq 1 10); do
            regions+=" $chrom_bed_dir/sliding_window/relative.0.05/${chrom}/w$w.two_outgroup_consistent_region.core.bed"
        done

        for region_bed in $(echo $regions | tr " " "\n"); do
            chrom_var_count+=" $(get_average_variant_count_for_chrom $chrom $region_bed)"

        done
        echo $chrom_var_count >>$mean_variant_count
    done
}

compute_mutation_density_noncore() {
    var_type=$1

    mutation_density_dir=$global_output_dir/$popu_symbol/$histone_modification_type/sliding_window/relative.0.05/mutation_density
    mkdir -p $mutation_density_dir
    mean_variant_count=$mutation_density_dir/${var_type}_mean_variant_count_noncore

    rm -rf $mean_variant_count

    cd $histone_mofification_dir
    for chrom in $(echo $autosomes | tr " " "\n"); do
        chrom_var_count=""

        regions="$chrom_bed_dir/${chrom}.nopeak.two_outgroup_consistent_region.noncore.bed"
        regions+=" $chrom_bed_dir/${chrom}.nopeak500.two_outgroup_consistent_region.noncore.bed"

        for w in $(seq 1 10); do
            regions+=" $chrom_bed_dir/sliding_window/relative.0.05/${chrom}/w$w.two_outgroup_consistent_region.noncore.bed"
        done

        for region_bed in $(echo $regions | tr " " "\n"); do
            chrom_var_count+=" $(get_average_variant_count_for_chrom $chrom $region_bed)"

        done
        echo $chrom_var_count >>$mean_variant_count
    done
}

compute_mutation_density_core_no6ma() {
    var_type=$1

    mutation_density_dir=$global_output_dir/$popu_symbol/$histone_modification_type/sliding_window/relative.0.05/mutation_density
    mkdir -p $mutation_density_dir
    # mean_variant_count=$mutation_density_dir/${var_type}_mean_variant_count_core_no6ma
    mean_variant_count=$mutation_density_dir/${var_type}_mean_variant_count_core_no6ma_count

    rm -rf $mean_variant_count

    cd $histone_mofification_dir
    for chrom in $(echo $autosomes | tr " " "\n"); do
        chrom_var_count=""

        regions="$chrom_bed_dir/${chrom}.nopeak.two_outgroup_consistent_region.core.no6ma.bed"
        regions+=" $chrom_bed_dir/${chrom}.nopeak500.two_outgroup_consistent_region.core.no6ma.bed"

        for w in $(seq 1 10); do
            regions+=" $chrom_bed_dir/sliding_window/relative.0.05/${chrom}/w$w.two_outgroup_consistent_region.core.no6ma.bed"
        done

        for region_bed in $(echo $regions | tr " " "\n"); do
            # chrom_var_count+=" $(get_average_variant_count_for_chrom $chrom $region_bed)"
            chrom_var_count+=" $(get_average_variant_count_for_chrom $chrom $region_bed)"

        done
        echo $chrom_var_count >>$mean_variant_count
    done
}

get_average_variant_count_for_chrom() {
    chrom=$1
    region_bed=$2
    chrom_number=$(echo $chrom | sed 's/Pf3D7_//g' | sed 's/_v3//g')

    chrom_region_len=$(awk '{print $3-$2}' $region_bed | awk '{s+=$1} END {print s}')
    if [ $chrom_region_len -gt 0 ] 2>/dev/null; then
        chrom_mutation_count=""
        if [ $var_type == "allvar" ]; then
            chrom_mutation_count=$($bedtools intersect -a $variant_dir/${popu_symbol}_VQSLOD_gt0_${chrom_number}_polysite.bed -b $region_bed | awk '{print $6+$9}' | awk '{s+=$1} END {print s}')
        elif [ $var_type == "snps" ]; then
            chrom_mutation_count=$($bedtools intersect -a $variant_dir/${popu_symbol}_VQSLOD_gt0_${chrom_number}_polysite.bed -b $region_bed | awk '{print $6}' | awk '{s+=$1} END {print s}')
        elif [ $var_type == "indels" ]; then
            chrom_mutation_count=$($bedtools intersect -a $variant_dir/${popu_symbol}_VQSLOD_gt0_${chrom_number}_polysite.bed -b $region_bed | awk '{print $9}' | awk '{s+=$1} END {print s}')
        elif [ $var_type == "transition" ]; then
            chrom_mutation_count=$($bedtools intersect -a $variant_dir/${popu_symbol}_VQSLOD_gt0_${chrom_number}_polysite.bed -b $region_bed | awk '{print $4}' | awk '{s+=$1} END {print s}')
        elif [ $var_type == "transversion" ]; then
            chrom_mutation_count=$($bedtools intersect -a $variant_dir/${popu_symbol}_VQSLOD_gt0_${chrom_number}_polysite.bed -b $region_bed | awk '{print $5}' | awk '{s+=$1} END {print s}')
        elif [ $var_type == "insertion" ]; then
            chrom_mutation_count=$($bedtools intersect -a $variant_dir/${popu_symbol}_VQSLOD_gt0_${chrom_number}_polysite.bed -b $region_bed | awk '{print $7}' | awk '{s+=$1} END {print s}')
        elif [ $var_type == "deletion" ]; then
            chrom_mutation_count=$($bedtools intersect -a $variant_dir/${popu_symbol}_VQSLOD_gt0_${chrom_number}_polysite.bed -b $region_bed | awk '{print $8}' | awk '{s+=$1} END {print s}')
        elif [ $var_type == "A2G" ]; then
            chrom_mutation_count=$($bedtools intersect -a $variant_dir/${popu_symbol}_VQSLOD_gt0_${chrom_number}_polysite.bed -b $region_bed | awk '{print $10}' | awk '{s+=$1} END {print s}')
        elif [ $var_type == "G2A" ]; then
            chrom_mutation_count=$($bedtools intersect -a $variant_dir/${popu_symbol}_VQSLOD_gt0_${chrom_number}_polysite.bed -b $region_bed | awk '{print $11}' | awk '{s+=$1} END {print s}')
        elif [ $var_type == "T2C" ]; then
            chrom_mutation_count=$($bedtools intersect -a $variant_dir/${popu_symbol}_VQSLOD_gt0_${chrom_number}_polysite.bed -b $region_bed | awk '{print $12}' | awk '{s+=$1} END {print s}')
        elif [ $var_type == "C2T" ]; then
            chrom_mutation_count=$($bedtools intersect -a $variant_dir/${popu_symbol}_VQSLOD_gt0_${chrom_number}_polysite.bed -b $region_bed | awk '{print $13}' | awk '{s+=$1} END {print s}')
        elif [ $var_type == "A2C" ]; then
            chrom_mutation_count=$($bedtools intersect -a $variant_dir/${popu_symbol}_VQSLOD_gt0_${chrom_number}_polysite.bed -b $region_bed | awk '{print $14}' | awk '{s+=$1} END {print s}')
        elif [ $var_type == "A2T" ]; then
            chrom_mutation_count=$($bedtools intersect -a $variant_dir/${popu_symbol}_VQSLOD_gt0_${chrom_number}_polysite.bed -b $region_bed | awk '{print $15}' | awk '{s+=$1} END {print s}')
        elif [ $var_type == "G2C" ]; then
            chrom_mutation_count=$($bedtools intersect -a $variant_dir/${popu_symbol}_VQSLOD_gt0_${chrom_number}_polysite.bed -b $region_bed | awk '{print $16}' | awk '{s+=$1} END {print s}')
        elif [ $var_type == "G2T" ]; then
            chrom_mutation_count=$($bedtools intersect -a $variant_dir/${popu_symbol}_VQSLOD_gt0_${chrom_number}_polysite.bed -b $region_bed | awk '{print $17}' | awk '{s+=$1} END {print s}')
        elif [ $var_type == "C2A" ]; then
            chrom_mutation_count=$($bedtools intersect -a $variant_dir/${popu_symbol}_VQSLOD_gt0_${chrom_number}_polysite.bed -b $region_bed | awk '{print $18}' | awk '{s+=$1} END {print s}')
        elif [ $var_type == "C2G" ]; then
            chrom_mutation_count=$($bedtools intersect -a $variant_dir/${popu_symbol}_VQSLOD_gt0_${chrom_number}_polysite.bed -b $region_bed | awk '{print $19}' | awk '{s+=$1} END {print s}')
        elif [ $var_type == "T2A" ]; then
            chrom_mutation_count=$($bedtools intersect -a $variant_dir/${popu_symbol}_VQSLOD_gt0_${chrom_number}_polysite.bed -b $region_bed | awk '{print $20}' | awk '{s+=$1} END {print s}')
        elif [ $var_type == "T2G" ]; then
            chrom_mutation_count=$($bedtools intersect -a $variant_dir/${popu_symbol}_VQSLOD_gt0_${chrom_number}_polysite.bed -b $region_bed | awk '{print $21}' | awk '{s+=$1} END {print s}')
        elif [ $var_type == "fixation" ]; then # 这里指snp的固定
            chrom_mutation_count=$($bedtools intersect -a $variant_dir/${popu_symbol}_VQSLOD_gt0_${chrom_number}_polysite.bed -b $region_bed | awk '$6==1 && $9==0{print $0}' | wc -l)
        fi

        if [ $chrom_mutation_count -gt 0 ] 2>/dev/null; then
            echo ""
        else
            chrom_mutation_count=0
        fi
        chrom_region_mutation_count_mean=$(echo "scale=10;${chrom_mutation_count}/${chrom_region_len}" | bc)
        chrom_region_mutation_count_mean1=$(printf "%0.6f" $chrom_region_mutation_count_mean)
        echo $chrom_region_mutation_count_mean1
    else
        echo "NA"
    fi
}

get_average_variant_count_for_chrom_count() {
    chrom=$1
    region_bed=$2
    chrom_number=$(echo $chrom | sed 's/Pf3D7_//g' | sed 's/_v3//g')

    # chrom_region_len=$(awk '{print $3-$2}' $region_bed | awk '{s+=$1} END {print s}')
    chrom_mutation_count=""
    if [ $var_type == "allvar" ]; then
        chrom_mutation_count=$($bedtools intersect -a $variant_dir/${popu_symbol}_VQSLOD_gt0_${chrom_number}_polysite.bed -b $region_bed | awk '{print $6+$9}' | awk '{s+=$1} END {print s}')
    elif [ $var_type == "snps" ]; then
        chrom_mutation_count=$($bedtools intersect -a $variant_dir/${popu_symbol}_VQSLOD_gt0_${chrom_number}_polysite.bed -b $region_bed | awk '{print $6}' | awk '{s+=$1} END {print s}')
    elif [ $var_type == "indels" ]; then
        chrom_mutation_count=$($bedtools intersect -a $variant_dir/${popu_symbol}_VQSLOD_gt0_${chrom_number}_polysite.bed -b $region_bed | awk '{print $9}' | awk '{s+=$1} END {print s}')
    elif [ $var_type == "transition" ]; then
        chrom_mutation_count=$($bedtools intersect -a $variant_dir/${popu_symbol}_VQSLOD_gt0_${chrom_number}_polysite.bed -b $region_bed | awk '{print $4}' | awk '{s+=$1} END {print s}')
    elif [ $var_type == "transversion" ]; then
        chrom_mutation_count=$($bedtools intersect -a $variant_dir/${popu_symbol}_VQSLOD_gt0_${chrom_number}_polysite.bed -b $region_bed | awk '{print $5}' | awk '{s+=$1} END {print s}')
    elif [ $var_type == "insertion" ]; then
        chrom_mutation_count=$($bedtools intersect -a $variant_dir/${popu_symbol}_VQSLOD_gt0_${chrom_number}_polysite.bed -b $region_bed | awk '{print $7}' | awk '{s+=$1} END {print s}')
    elif [ $var_type == "deletion" ]; then
        chrom_mutation_count=$($bedtools intersect -a $variant_dir/${popu_symbol}_VQSLOD_gt0_${chrom_number}_polysite.bed -b $region_bed | awk '{print $8}' | awk '{s+=$1} END {print s}')
    elif [ $var_type == "A2G" ]; then
        chrom_mutation_count=$($bedtools intersect -a $variant_dir/${popu_symbol}_VQSLOD_gt0_${chrom_number}_polysite.bed -b $region_bed | awk '{print $10}' | awk '{s+=$1} END {print s}')
    elif [ $var_type == "G2A" ]; then
        chrom_mutation_count=$($bedtools intersect -a $variant_dir/${popu_symbol}_VQSLOD_gt0_${chrom_number}_polysite.bed -b $region_bed | awk '{print $11}' | awk '{s+=$1} END {print s}')
    elif [ $var_type == "T2C" ]; then
        chrom_mutation_count=$($bedtools intersect -a $variant_dir/${popu_symbol}_VQSLOD_gt0_${chrom_number}_polysite.bed -b $region_bed | awk '{print $12}' | awk '{s+=$1} END {print s}')
    elif [ $var_type == "C2T" ]; then
        chrom_mutation_count=$($bedtools intersect -a $variant_dir/${popu_symbol}_VQSLOD_gt0_${chrom_number}_polysite.bed -b $region_bed | awk '{print $13}' | awk '{s+=$1} END {print s}')
    elif [ $var_type == "A2C" ]; then
        chrom_mutation_count=$($bedtools intersect -a $variant_dir/${popu_symbol}_VQSLOD_gt0_${chrom_number}_polysite.bed -b $region_bed | awk '{print $14}' | awk '{s+=$1} END {print s}')
    elif [ $var_type == "A2T" ]; then
        chrom_mutation_count=$($bedtools intersect -a $variant_dir/${popu_symbol}_VQSLOD_gt0_${chrom_number}_polysite.bed -b $region_bed | awk '{print $15}' | awk '{s+=$1} END {print s}')
    elif [ $var_type == "G2C" ]; then
        chrom_mutation_count=$($bedtools intersect -a $variant_dir/${popu_symbol}_VQSLOD_gt0_${chrom_number}_polysite.bed -b $region_bed | awk '{print $16}' | awk '{s+=$1} END {print s}')
    elif [ $var_type == "G2T" ]; then
        chrom_mutation_count=$($bedtools intersect -a $variant_dir/${popu_symbol}_VQSLOD_gt0_${chrom_number}_polysite.bed -b $region_bed | awk '{print $17}' | awk '{s+=$1} END {print s}')
    elif [ $var_type == "C2A" ]; then
        chrom_mutation_count=$($bedtools intersect -a $variant_dir/${popu_symbol}_VQSLOD_gt0_${chrom_number}_polysite.bed -b $region_bed | awk '{print $18}' | awk '{s+=$1} END {print s}')
    elif [ $var_type == "C2G" ]; then
        chrom_mutation_count=$($bedtools intersect -a $variant_dir/${popu_symbol}_VQSLOD_gt0_${chrom_number}_polysite.bed -b $region_bed | awk '{print $19}' | awk '{s+=$1} END {print s}')
    elif [ $var_type == "T2A" ]; then
        chrom_mutation_count=$($bedtools intersect -a $variant_dir/${popu_symbol}_VQSLOD_gt0_${chrom_number}_polysite.bed -b $region_bed | awk '{print $20}' | awk '{s+=$1} END {print s}')
    elif [ $var_type == "T2G" ]; then
        chrom_mutation_count=$($bedtools intersect -a $variant_dir/${popu_symbol}_VQSLOD_gt0_${chrom_number}_polysite.bed -b $region_bed | awk '{print $21}' | awk '{s+=$1} END {print s}')
    elif [ $var_type == "fixation" ]; then # 这里指snp的固定
        chrom_mutation_count=$($bedtools intersect -a $variant_dir/${popu_symbol}_VQSLOD_gt0_${chrom_number}_polysite.bed -b $region_bed | awk '$6==1 && $9==0{print $0}' | wc -l)
    fi

    if [ $chrom_mutation_count -gt 0 ] 2>/dev/null; then
        echo ""
    else
        chrom_mutation_count=0
    fi
    echo $chrom_mutation_count
}

get_average_variant_count_for_chrom_region_len() {
    chrom=$1
    region_bed=$2
    chrom_number=$(echo $chrom | sed 's/Pf3D7_//g' | sed 's/_v3//g')

    chrom_region_len=$(awk '{print $3-$2}' $region_bed | awk '{s+=$1} END {print s}')
    echo $chrom_region_len
}
# VARIABLE NAMING TODO:
popu_symbol="ESEA_WSEA_OCE_SAM_SAS"
histone_modification_type="WT-42-46h-H3K4me3"

malaria_project_dir="/picb/evolgen2/users/gushanshan/projects/malaria"
code_dir=${malaria_project_dir}/code/histone_modification/2_compute_mutation_density

histone_modification_global_dir=$malaria_project_dir/dataAndResult/histone_methy
histone_mofification_dir=$histone_modification_global_dir/*${histone_modification_type}*/BAM_broad_nomodel_dup1
chrom_bed_dir=chrom
modifi_level_dir=modifi_level
treatment_level="*_treat_pileup.bdg"
control_level="*_control_lambda.bdg"

global_output_dir=${malaria_project_dir}/dataAndResult/1_2rd_initial_evaluation
two_outgroup_consistent_region_in_core_and_noncore_dir=${malaria_project_dir}/dataAndResult/ref_genome/pf_3D7/anno/3D7_distant_africa_strain_consistent_region_in_core_and_noncore
mutation_density_dir=$global_output_dir/${popu_symbol}/two_outgroup_consistent_in_core_and_noncore/histone_modification/${histone_modification_type}
variant_dir=$global_output_dir/$popu_symbol/variant_two_group

two_outgroup_inconsistent_region_in_core_and_noncore=$two_outgroup_consistent_region_in_core_and_noncore_dir/inconsistent_region_in_core_and_noncore.bed
peak_file=$histone_mofification_dir/*_peaks.bed
nopeak_file=$(echo $peak_file | sed 's/peaks/nopeak/g')
ref_dir="/picb/evolgen/users/gushanshan/projects/malaria/dataAndResult/ref_genome/pf_3D7"
chrom_len=$ref_dir/"genome/chrom.length"
m6mA_peak="/picb/evolgen/users/gushanshan/projects/malaria/dataAndResult/6mA/jiang/2rd/macs2_output/peak.bed"

autosomes="Pf3D7_01_v3 Pf3D7_02_v3 Pf3D7_03_v3 Pf3D7_04_v3 Pf3D7_05_v3 Pf3D7_06_v3 Pf3D7_07_v3 Pf3D7_08_v3 Pf3D7_09_v3 Pf3D7_10_v3 Pf3D7_11_v3 Pf3D7_12_v3 Pf3D7_13_v3 Pf3D7_14_v3"
bedtools="/picb/evolgen/users/gushanshan/software/bedtools/bedtools"
# VARIABLE NAMING for test module TODO:

# PROCESS TODO:
set -ex
cd $histone_mofification_dir
select_chrom_peak_nopeak_bed
get_chrom_treatment_control_histone_modification_level_bed
get_sliding_window
exclude_inconsistent_site_from_window
compute_mutation_density "snps"
compute_mutation_density "indels"

# compute_mutation_density_no6ma "snps"
# compute_mutation_density_no6ma "indels"

# compute_mutation_density_core "snps"
# compute_mutation_density_core "indels"

# compute_mutation_density_core_no6ma "snps"
# compute_mutation_density_core_no6ma "indels"

# compute_mutation_density_no6ma_extend "snps"
# compute_mutation_density_no6ma_extend "indels"

# compute_mutation_density_noncore "snps"
# compute_mutation_density_noncore "indels"
